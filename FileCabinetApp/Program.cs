// <auto-generated />
namespace FileCabinetApp
{
    using System;
    using FileCabinetApp.CommandHandlers;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Xml;
    using System.Xml.Serialization;

    /// <summary>
    /// Main class with main functionality.
    /// </summary>
    public static class Program
    {
        private const string DeveloperName = "Anatoliy Pecherny";
        private const string HintMessage = "Enter your command, or enter 'help' to get help.";
        private const int CommandHelpIndex = 0;
        private const int DescriptionHelpIndex = 1;
        private const int ExplanationHelpIndex = 2;

        public static bool isRunning = true;

        /*
        private static Tuple<string, Action<string>>[] commands = new Tuple<string, Action<string>>[]
        {
            new Tuple<string, Action<string>>("help", PrintHelp),
            new Tuple<string, Action<string>>("create", Create),
            new Tuple<string, Action<string>>("stat", Stat),
            new Tuple<string, Action<string>>("list", List),
            new Tuple<string, Action<string>>("edit", Edit),
            new Tuple<string, Action<string>>("export", Export),
            new Tuple<string, Action<string>>("import", Import),
            new Tuple<string, Action<string>>("find", Find),
            new Tuple<string, Action<string>>("remove", Remove),
            new Tuple<string, Action<string>>("purge", Purge),
            new Tuple<string, Action<string>>("exit", Exit),
        };*/

        public static IFileCabinetService fileCabinetService = new FileCabinetMemoryService(new DefaultValidator());

        public static void Main(string[] args)
        {
            Console.WriteLine($"File Cabinet Application, developed by {Program.DeveloperName}");
            if (args.Length > 0)
            {
                string[] parameters = ParseArgs(args);
                SetSettings(parameters);
            }
            else
            {
                Console.WriteLine($"Using default validation rules.");
            }
            
            Console.WriteLine(Program.HintMessage);
            Console.WriteLine();

            ICommandHandler handler = Program.CreateCommandHandlers();

            do
            {
                Console.Write("> ");
                var inputs = Console.ReadLine().Split(' ', 2);
                var parameters = inputs.Length > 1 ? inputs[1] : string.Empty;
                handler.Handle(new AppCommandRequest(inputs[0], parameters));
                /*
                const int commandIndex = 0;
                var command = inputs[commandIndex];

                if (string.IsNullOrEmpty(command))
                {
                    Console.WriteLine(Program.HintMessage);
                    continue;
                }

                var index = Array.FindIndex(commands, 0, commands.Length, i => i.Item1.Equals(command, StringComparison.InvariantCultureIgnoreCase));
                if (index >= 0)
                {
                    const int parametersIndex = 1;
                    var parameters = inputs.Length > 1 ? inputs[parametersIndex] : string.Empty;
                    //commands[index].Item2(parameters);
                    handler.Handle(new AppCommandRequest(inputs[0], parameters));
                }
                else
                {
                    PrintMissedCommandInfo(command);
                }*/
            }
            while (isRunning);
        }

        private static string[] ParseArgs(string[] args)
        {
            try
            {
                if (args[0].StartsWith("--"))
                {
                    args[0] = args[0].Replace("--", "");
                    string[] parameters = args[0].Split('=', 2);
                    return parameters;
                }
                else if (args[0].StartsWith('-'))
                {
                    string[] parameters = new string[2] { args[0].Replace("-", ""), args[1] };
                    return parameters;
                }
                else
                {
                    return null;
                }
            }
            catch(ArgumentException e)
            {
                throw new ArgumentException(e.Message);
            }
        }

        private static void SetSettings(string[] parameters)
        {
            switch (parameters[0].ToUpper())
            {
                case "V":
                case "VALIDATION-RULES":
                    SetValidationRule(parameters[1]);
                    break;
                case "S":
                case "STORAGE":
                    SetServiceType(parameters[1]);
                    break;
                default:
                    SetValidationRule("Default");
                    break;
            }
        }

        private static void SetValidationRule(string parameter)
        {
            switch (parameter.ToUpper())
            {
                case "DEFAULT":
                    Console.WriteLine($"Using {parameter.ToLower()} validation rules.");
                    break;
                case "CUSTOM":
                    Console.WriteLine($"Using {parameter.ToLower()} validation rules.");
                    Program.fileCabinetService = new FileCabinetMemoryService(new CustomValidator());
                    break;
                default:
                    Console.WriteLine($"Using default validation rules.");
                    break;
            }
        }

        private static void SetServiceType(string parameter)
        {
            switch (parameter.ToUpper())
            {
                case "MEMORY":
                    Console.WriteLine($"Using {parameter.ToLower()} service type.");
                    break;
                case "FILE":
                    Console.WriteLine($"Using {parameter.ToLower()} service type.");
                    Program.fileCabinetService = new FileCabinetFilesystemService(new DefaultValidator());
                    break;
                default:
                    Console.WriteLine($"Using default service type.");
                    break;
            }
        }

        private static ICommandHandler CreateCommandHandlers()
        {
            return new CommandHandler();
        }
    }
}