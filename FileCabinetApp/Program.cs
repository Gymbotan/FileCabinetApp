// <auto-generated />
namespace FileCabinetApp
{
    using System;
    using FileCabinetApp.CommandHandlers;
    using System.Collections.Generic;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Configuration.Json;
    using System.IO;

    /// <summary>
    /// Main class with main functionality.
    /// </summary>
    public static class Program
    {
        private const string DeveloperName = "Anatoliy Pecherny";
        private const string HintMessage = "Enter your command, or enter 'help' to get help.";

        private static bool isRunning = true;
        
        private static IFileCabinetService fileCabinetService = new FileCabinetMemoryService(new ValidatorBuilder().CreateDefault());
        private static ValidationRules rules;

        public static void Main(string[] args)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("validation-rules.json")
                .Build();

            Console.WriteLine($"File Cabinet Application, developed by {Program.DeveloperName}");

            string[] arguments = ParseArgs(args);

            string validationType = "default";
            string storageType = "memory";
            bool isStopwatch = false;
            bool isLogger = false;

            if (args.Length != 0)
            {
                for (int i = 0; i < arguments.Length; i += 2)
                {
                    switch (arguments[i].ToLower())
                    {
                        case "v":
                        case "validation-rules":
                            if (arguments[i + 1].ToLower() == "custom")
                            {
                                validationType = "custom";
                            }
                            break;
                        case "s":
                        case "storage":
                            if (arguments[i + 1].ToLower() == "file")
                            {
                                storageType = "file";
                            }
                            break;
                        case "use":
                            if (arguments[i + 1].ToLower() == "stopwatch")
                            {
                                isStopwatch = true;
                            }
                            if (arguments[i + 1].ToLower() == "logger")
                            {
                                isLogger = true;
                            }
                            break;
                    }
                }
            }

            Console.WriteLine($"validationType = {validationType}");
            Console.WriteLine($"storageType = {storageType}");
            Console.WriteLine($"isStopwatch = {isStopwatch}");
            Console.WriteLine($"isLogger = {isLogger}");
            Console.WriteLine();

            rules = builder.GetSection(validationType).Get<ValidationRules>();
            if (storageType == "file")
            {
                Program.fileCabinetService = new FileCabinetFilesystemService(new ValidatorBuilder(rules).CreateFromJson());
            }
            else
            {
                Program.fileCabinetService = new FileCabinetMemoryService(new ValidatorBuilder(rules).CreateFromJson());
            }

            if (isStopwatch)
            {
                Program.fileCabinetService = new ServiceMeter(Program.fileCabinetService);
            }

            Console.WriteLine(Program.HintMessage);
            Console.WriteLine();

            var commandHandler = Program.CreateCommandHandlers();

            do
            {
                Console.Write("> ");
                var inputs = Console.ReadLine().Split(' ', 2);
                var parameters = inputs.Length > 1 ? inputs[1] : string.Empty;
                commandHandler.Handle(new AppCommandRequest(inputs[0], parameters));
            }
            while (isRunning);
        }

        private static string[] ParseArgs(string[] args)
        {
            if (args.Length == 0)
            {
                return new string[0];
            }

            List<string> parameters = new List<string>();

            int i = 0;
            while (i < args.Length)
            {
                if (args[i].StartsWith("--"))
                {
                    string[] temp = args[i].Split('='); 
                    parameters.Add(temp[0].Replace("--", ""));
                    parameters.Add(temp[1]);
                    i++;
                }
                else if (args[i].StartsWith("-"))
                {
                    parameters.Add(args[i++].Substring(1));
                    parameters.Add(args[i++]);
                }
                else
                {
                    string[] temp = args[i].Split('-');
                    parameters.Add(temp[0]);
                    parameters.Add(temp[1]);
                    i++;
                }
            }

            return parameters.ToArray();
        }

        /// <summary>
        /// Sets value for isRunning field.
        /// </summary>
        /// <param name="value">Value.</param>
        private static void SetIsRunning(bool value)
        {
            isRunning = value;
        }

        private static ICommandHandler CreateCommandHandlers()
        {
            var recordPrinter = new DefaultRecordPrinter();

            var helpHandler = new HelpCommandHandler();
            var createHandler = new CreateCommandHandler(Program.fileCabinetService);
            var statHandler = new StatCommandHandler(Program.fileCabinetService);
            var listHandler = new ListCommandHandler(Program.fileCabinetService, Print);
            var editHandler = new EditCommandHandler(Program.fileCabinetService);
            var exportHandler = new ExportCommandHandler(Program.fileCabinetService);
            var importHandler = new ImportCommandHandler(Program.fileCabinetService);
            var findHandler = new FindCommandHandler(Program.fileCabinetService, Print);
            var removeHandler = new RemoveCommandHandler(Program.fileCabinetService);
            var purgeHandler = new PurgeCommandHandler(Program.fileCabinetService);
            var exitHandler = new ExitCommandHandler(Program.fileCabinetService, SetIsRunning);

            helpHandler.SetNext(createHandler);
            createHandler.SetNext(statHandler);
            statHandler.SetNext(listHandler);
            listHandler.SetNext(editHandler);
            editHandler.SetNext(exportHandler);
            exportHandler.SetNext(importHandler);
            importHandler.SetNext(findHandler);
            findHandler.SetNext(removeHandler);
            removeHandler.SetNext(purgeHandler);
            purgeHandler.SetNext(exitHandler);

            return helpHandler;
        }

        /// <summary>
        /// Prints records.
        /// </summary>
        /// <param name="records">Records.</param>
        private static void Print(IEnumerable<FileCabinetRecord> records)
        {
            if (records != null)
            {
                foreach (var ar in records)
                {
                    ar.ShowRecord();
                }
            }
        }
    }
}