// <auto-generated />
namespace FileCabinetApp
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
        
    public class FileCabinetService
    {
        private readonly List<FileCabinetRecord> list = new List<FileCabinetRecord>();

        private readonly Dictionary<string, List<FileCabinetRecord>> firstNameDictionary = new Dictionary<string, List<FileCabinetRecord>>();

        private readonly Dictionary<string, List<FileCabinetRecord>> lastNameDictionary = new Dictionary<string, List<FileCabinetRecord>>();

        private readonly Dictionary<string, List<FileCabinetRecord>> dateOfBirthDictionary = new Dictionary<string, List<FileCabinetRecord>>();

        public static string GetDateAsString(DateTime date)
        {
            return $"{date.Year}-{date.ToString("MMM", CultureInfo.GetCultureInfo("en-us"))}-{date.Day}".ToUpper();
        }

        public void AddToDictionary(Dictionary<string, List<FileCabinetRecord>> dictionary, string value, FileCabinetRecord record)
        {
            if (dictionary.ContainsKey(value))
            {
                dictionary[value].Add(record);
            }
            else
            {
                dictionary.Add(value, new List<FileCabinetRecord> { record });
            }
        }

        public int CreateRecord(string firstName, string lastName, DateTime dateOfBirth, short height, decimal weight, char gender)
        {
            if (string.IsNullOrWhiteSpace(firstName))
            {
                throw new ArgumentNullException(firstName);
            }

            if (string.IsNullOrWhiteSpace(lastName))
            {
                throw new ArgumentNullException(lastName);
            }

            if (firstName.Length < 2 || firstName.Length > 60)
            {
                throw new ArgumentException(firstName);
            }

            if (lastName.Length < 2 || lastName.Length > 60)
            {
                throw new ArgumentException(lastName);
            }

            if (dateOfBirth < new DateTime(1950, 01, 01) || dateOfBirth > DateTime.Now)
            {
                throw new ArgumentException("Wrong dateOfBirth");
            }

            if (height < 30 || height > 250)
            {
                throw new ArgumentException(height.ToString());
            }

            if (weight <= 0)
            {
                throw new ArgumentException(weight.ToString());
            }

            if (gender != 'm' && gender != 'f' && gender != 'a')
            {
                throw new ArgumentException(gender.ToString());
            }

            int id = this.list.Count + 1;
            
            this.list.Add(new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));

            this.AddToDictionary(this.firstNameDictionary, firstName.ToUpper(), new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));
            this.AddToDictionary(this.lastNameDictionary, lastName.ToUpper(), new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));
            string dateAsString = GetDateAsString(dateOfBirth);
            this.AddToDictionary(this.dateOfBirthDictionary, dateAsString, new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));

            return id;
        }

        public void ListRecords()
        {
            foreach (FileCabinetRecord record in this.list)
            {
                record.ShowRecord();
            }
        }

        public bool IsRecordExist(int id)
        {
            if (this.list.Exists(x => x.Id == id))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void EditRecord(int id, string firstName, string lastName, DateTime dateOfBirth, short height, decimal weight, char gender)
        {
            FileCabinetRecord record = this.list.Find(x => x.Id == id);
            if (string.IsNullOrWhiteSpace(firstName))
            {
                throw new ArgumentNullException(firstName);
            }

            if (string.IsNullOrWhiteSpace(lastName))
            {
                throw new ArgumentNullException(lastName);
            }

            if (firstName.Length < 2 || firstName.Length > 60)
            {
                throw new ArgumentException(firstName);
            }

            if (lastName.Length < 2 || lastName.Length > 60)
            {
                throw new ArgumentException(lastName);
            }

            if (dateOfBirth < new DateTime(1950, 01, 01) || dateOfBirth > DateTime.Now)
            {
                throw new ArgumentException("Wrong date of birth");
            }

            if (height < 30 || height > 250)
            {
                throw new ArgumentException(height.ToString());
            }

            if (weight <= 0)
            {
                throw new ArgumentException(weight.ToString());
            }

            if (gender != 'm' && gender != 'f' && gender != 'a')
            {
                throw new ArgumentException(gender.ToString());
            }

            FileCabinetRecord itemToDelete = this.firstNameDictionary[record.FirstName.ToUpper()].SingleOrDefault(x => x.Id == id); 
            this.firstNameDictionary[record.FirstName.ToUpper()].Remove(itemToDelete);

            itemToDelete = this.lastNameDictionary[record.LastName.ToUpper()].SingleOrDefault(x => x.Id == id);
            this.lastNameDictionary[record.LastName.ToUpper()].Remove(itemToDelete);
            
            string dateAsString = GetDateAsString(record.DateOfBirth);
            itemToDelete = this.dateOfBirthDictionary[dateAsString].SingleOrDefault(x => x.Id == id);
            this.dateOfBirthDictionary[dateAsString].Remove(record);

            this.AddToDictionary(this.firstNameDictionary, firstName.ToUpper(), new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));
            this.AddToDictionary(this.lastNameDictionary, lastName.ToUpper(), new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));
            dateAsString = GetDateAsString(dateOfBirth);
            this.AddToDictionary(this.dateOfBirthDictionary, dateAsString, new FileCabinetRecord(id, firstName, lastName, dateOfBirth, height, weight, gender));

            record.UpdateRecord(firstName, lastName, dateOfBirth, height, weight, gender);
        }

        public FileCabinetRecord[] FindByFirstName(string firstName) 
        {
            /*var result = from rec in this.list
                         where rec.FirstName.ToUpper() == firstName.ToUpper()
                         select rec;
            return result.ToArray();*/ //Realization with LINQ
            if (firstNameDictionary.ContainsKey(firstName.ToUpper()) && this.firstNameDictionary[firstName.ToUpper()].Count > 0)
            {
                return this.firstNameDictionary[firstName.ToUpper()].ToArray();
            }
            else
            {
                Console.WriteLine($"There are no records with first name {firstName}");
                return null;
            }
        }

        public FileCabinetRecord[] FindByLastName(string lastName)
        {
            if (lastNameDictionary.ContainsKey(lastName.ToUpper()) && this.lastNameDictionary[lastName.ToUpper()].Count > 0)
            {
                return this.lastNameDictionary[lastName.ToUpper()].ToArray();
            }
            else
            {
                Console.WriteLine($"There are no records with last name {lastName}");
                return null;
            }
        }

        public FileCabinetRecord[] FindByDateOfBirth(string dateOfBirth)
        {
            if (dateOfBirthDictionary.ContainsKey(dateOfBirth) && this.dateOfBirthDictionary[dateOfBirth.ToUpper()].Count > 0)
            {
                return this.dateOfBirthDictionary[dateOfBirth.ToUpper()].ToArray();
            }
            else
            {
                Console.WriteLine($"There are no records with date of birth {dateOfBirth}");
                return null;
            }
        }

        public FileCabinetRecord[] GetRecords()
        {
            // TODO: добавьте реализацию метода
            return Array.Empty<FileCabinetRecord>();
        }

        public int GetStat()
        {
            return this.list.Count;
        }
    }
}
